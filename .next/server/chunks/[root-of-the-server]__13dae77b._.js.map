{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/vendors/verify-session/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get(\"Authorization\");\n    \n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      return NextResponse.json(\n        { error: \"No session provided\" },\n        { status: 401 }\n      );\n    }\n\n    const sessionId = authHeader.replace(\"Bearer \", \"\");\n    \n    // In a real app, this would validate against a database/session store\n    // For demo purposes, we'll accept any non-empty session ID\n    if (sessionId && sessionId.startsWith(\"session_\")) {\n      return NextResponse.json({\n        valid: true,\n        sessionId,\n        vendorId: \"vendor_123\",\n        email: \"demo@travelmarket.com\"\n      });\n    }\n\n    return NextResponse.json(\n      { error: \"Invalid session\" },\n      { status: 401 }\n    );\n\n  } catch (error) {\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,WAAW,OAAO,CAAC,WAAW;QAEhD,sEAAsE;QACtE,2DAA2D;QAC3D,IAAI,aAAa,UAAU,UAAU,CAAC,aAAa;YACjD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBACvB,OAAO;gBACP;gBACA,UAAU;gBACV,OAAO;YACT;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkB,GAC3B;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}