{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/bookings/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// Mock bookings database - in a real app, this would be a proper database\nlet bookings: any[] = [];\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const vendorId = searchParams.get('vendorId');\n    const userId = searchParams.get('userId');\n    const status = searchParams.get('status');\n    \n    let filteredBookings = [...bookings];\n    \n    // Filter by vendor\n    if (vendorId) {\n      filteredBookings = filteredBookings.filter(booking => \n        booking.vendorId === vendorId\n      );\n    }\n    \n    // Filter by user\n    if (userId) {\n      filteredBookings = filteredBookings.filter(booking => \n        booking.userId === userId\n      );\n    }\n    \n    // Filter by status\n    if (status) {\n      filteredBookings = filteredBookings.filter(booking => \n        booking.status === status\n      );\n    }\n    \n    return NextResponse.json({ \n      bookings: filteredBookings,\n      total: filteredBookings.length\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to fetch bookings\" }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const bookingData = await request.json();\n    \n    // Validate required fields\n    const requiredFields = ['serviceId', 'vendorId', 'startDate', 'endDate', 'guests'];\n    for (const field of requiredFields) {\n      if (!bookingData[field]) {\n        return NextResponse.json(\n          { error: `${field} is required` }, \n          { status: 400 }\n        );\n      }\n    }\n    \n    // Validate dates\n    const startDate = new Date(bookingData.startDate);\n    const endDate = new Date(bookingData.endDate);\n    const today = new Date();\n    \n    if (startDate < today) {\n      return NextResponse.json(\n        { error: \"Start date cannot be in the past\" }, \n        { status: 400 }\n      );\n    }\n    \n    if (endDate <= startDate) {\n      return NextResponse.json(\n        { error: \"End date must be after start date\" }, \n        { status: 400 }\n      );\n    }\n    \n    // Calculate booking amount\n    const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    const basePrice = bookingData.servicePrice || 100;\n    const guests = parseInt(bookingData.guests);\n    const totalAmount = basePrice * days * guests;\n    \n    const newBooking = {\n      id: \"BOOK\" + Date.now(),\n      serviceId: bookingData.serviceId,\n      vendorId: bookingData.vendorId,\n      userId: bookingData.userId || \"guest_\" + Date.now(),\n      serviceTitle: bookingData.serviceTitle || \"Travel Service\",\n      vendorName: bookingData.vendorName || \"Travel Vendor\",\n      startDate: bookingData.startDate,\n      endDate: bookingData.endDate,\n      guests: guests,\n      specialRequests: bookingData.specialRequests || \"\",\n      status: \"confirmed\",\n      totalAmount: totalAmount,\n      currency: \"USD\",\n      paymentStatus: \"pending\",\n      customerInfo: {\n        name: bookingData.customerName || \"Guest User\",\n        email: bookingData.customerEmail || \"guest@example.com\",\n        phone: bookingData.customerPhone || \"\"\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    bookings.push(newBooking);\n    \n    return NextResponse.json({ \n      success: true, \n      bookingId: newBooking.id,\n      booking: newBooking,\n      message: \"Booking confirmed successfully\"\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to create booking\" }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const bookingId = searchParams.get('id');\n    \n    if (!bookingId) {\n      return NextResponse.json(\n        { error: \"Booking ID is required\" }, \n        { status: 400 }\n      );\n    }\n    \n    const updateData = await request.json();\n    const bookingIndex = bookings.findIndex(b => b.id === bookingId);\n    \n    if (bookingIndex === -1) {\n      return NextResponse.json(\n        { error: \"Booking not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    // Update booking\n    bookings[bookingIndex] = {\n      ...bookings[bookingIndex],\n      ...updateData,\n      id: bookingId, // Ensure ID doesn't change\n      updatedAt: new Date().toISOString()\n    };\n    \n    return NextResponse.json({ \n      success: true, \n      booking: bookings[bookingIndex],\n      message: \"Booking updated successfully\"\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to update booking\" }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const bookingId = searchParams.get('id');\n    \n    if (!bookingId) {\n      return NextResponse.json(\n        { error: \"Booking ID is required\" }, \n        { status: 400 }\n      );\n    }\n    \n    const bookingIndex = bookings.findIndex(b => b.id === bookingId);\n    \n    if (bookingIndex === -1) {\n      return NextResponse.json(\n        { error: \"Booking not found\" }, \n        { status: 404 }\n      );\n    }\n    \n    // Cancel booking instead of deleting\n    bookings[bookingIndex].status = \"cancelled\";\n    bookings[bookingIndex].updatedAt = new Date().toISOString();\n    \n    return NextResponse.json({ \n      success: true, \n      booking: bookings[bookingIndex],\n      message: \"Booking cancelled successfully\"\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || \"Failed to cancel booking\" }, \n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}