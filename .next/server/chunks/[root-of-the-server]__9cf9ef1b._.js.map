{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/vendors/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport { z } from \"zod\";\n\n// Input validation schema\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { email, password } = loginSchema.parse(body);\n\n    // In a real app, this would query your database\n    // For now, we'll use a mock implementation\n    const mockVendor = {\n      id: \"vendor_123\",\n      email: \"demo@travelmarket.com\",\n      password: \"$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi\", // bcrypt hash for \"password\"\n      name: \"Demo Vendor\",\n    };\n\n    // Check if email exists\n    if (email !== mockVendor.email) {\n      return NextResponse.json(\n        { error: \"Invalid email or password\" },\n        { status: 401 }\n      );\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, mockVendor.password);\n    if (!isValidPassword) {\n      return NextResponse.json(\n        { error: \"Invalid email or password\" },\n        { status: 401 }\n      );\n    }\n\n    // Create session\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    return NextResponse.json({\n      success: true,\n      sessionId,\n      vendorId: mockVendor.id,\n      vendorName: mockVendor.name,\n      email: mockVendor.email,\n    });\n\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: \"Invalid input data\", details: error.errors },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,0BAA0B;AAC1B,MAAM,cAAc,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,YAAY,KAAK,CAAC;QAE9C,gDAAgD;QAChD,2CAA2C;QAC3C,MAAM,aAAa;YACjB,IAAI;YACJ,OAAO;YACP,UAAU;YACV,MAAM;QACR;QAEA,wBAAwB;QACxB,IAAI,UAAU,WAAW,KAAK,EAAE;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,WAAW,QAAQ;QAC1E,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,MAAM,YAAY,CAAC,QAAQ,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;QAEpF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,UAAU,WAAW,EAAE;YACvB,YAAY,WAAW,IAAI;YAC3B,OAAO,WAAW,KAAK;QACzB;IAEF,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oKAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAsB,SAAS,MAAM,MAAM;YAAC,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}